1,3c1,11
< #!/bin/sh
< 
< # Function to check if a package is installed
---
> #!/bin/bash
> set -o errexit
> set -o nounset
> set -o pipefail
> 
> # Function: is_installed
> # Purpose: Checks if a given package is installed using pacman.
> # Arguments: 
> #   $1 - The name of the package to check.
> # Returns: 
> #   0 if the package is installed, 1 otherwise.
6d13
< 
14c21,26
< # Function to get optional dependencies of a package
---
> # Function: get_optional_deps
> # Purpose: Retrieves optional dependencies of a given package and checks their installation status.
> # Arguments: 
> #   $1 - The name of the package to check.
> # Returns: 
> #   A list of optional dependencies with their descriptions and installation status.
17,18c29
< 
<     # Extract optional dependencies
---
>     # Extract optional dependencies from pacman information.
20,21c31
< 
<     # Process each line to handle multiple colons
---
>     # Process each line to handle multiple colons and format the output.
23c33
<         # Remove the "Optional Deps :" prefix from the first line
---
>         # Remove the "Optional Deps :" prefix from the first line.
27,28c37
< 
<         # Extract the package name (first field) and description (rest of the line)
---
>         # Extract the package name and description.
31,32c40
< 
<         # Check if the package is installed
---
>         # Check if the package is installed.
38,39c46
< 
<         # Print the package name, description, and installation status
---
>         # Print the package name, description, and installation status.
44c51,56
< # Function to create a menu of optional dependencies using dialog
---
> # Function: get_selections
> # Purpose: Creates a menu of optional dependencies using dialog and captures user selections.
> # Arguments: 
> #   $1 - A list of optional dependencies with their descriptions and installation status.
> # Returns: 
> #   Lists of selected and not selected items.
47,48d58
< 
<     # Create an array to store the dialog items
50,51d59
< 
<     # Process each line of the optional dependencies
52a61
>     # Process each line of the optional dependencies.
54d62
<         # Extract the package name, description, and installation status
58,59c66
< 
<         # Add the package name, description, and selection status to the dialog list
---
>         # Add the package name, description, and selection status to the dialog list.
66,67c73
< 
<     # Create a dialog checklist of optional dependencies
---
>     # Create a dialog checklist of optional dependencies.
69,70d74
< 
<     # Clear the screen after dialog exits
72,73d75
< 
<     # Process the selected and not selected items
76,77c78
< 
<     # Convert choices to an array
---
>     # Convert choices to an array.
79,80c80
< 
<     # Determine not selected items
---
>     # Determine not selected items.
87,88c87
< 
<     # Return the selected and not selected items
---
>     # Return the selected and not selected items.
90a90
>     IFS=$' \t\n'
93,99c93,96
< # run tests
< run_tests ()
< {
<   #TODO: Add tests
< }
< 
< # Main function
---
> # Function: main
> # Purpose: Main script logic to handle user input and manage optional dependencies.
> # Arguments: 
> #   $@ - The package name to check.
101d97
<     # Verify there is at least one argument or show Usage
103c99
<         echo "Usage: $0 <package_name>"
---
>         echo "Usage: $0 <package>"
106d101
< 
108,109c103
< 
<     # Capture the result of get_optional_deps
---
>     # Capture the result of get_optional_deps.
115,116c109
< 
<     # Use the function get_selections to create and echo a summary of the optional dependencies to be installed/removed
---
>     # Create and echo a summary of the optional dependencies to be installed/removed.
118,119d110
< 
<     # Print the selections
123,124c114,181
< # Call the main function with all script arguments
< main "$@"
---
> # Test function for is_installed
> # Purpose: Tests the is_installed function.
> test_is_installed() {
>     pacman -Q bash &> /dev/null
>     if [ $? -eq 0 ]; then
>         is_installed bash
>         [ $? -eq 0 ] && echo "test_is_installed passed" || echo "test_is_installed failed"
>     else
>         is_installed non_existent_package
>         [ $? -eq 1 ] && echo "test_is_installed passed" || echo "test_is_installed failed"
>     fi
> }
> 
> # Test function for get_optional_deps
> # Purpose: Tests the get_optional_deps function.
> test_get_optional_deps() {
>     output=$(get_optional_deps bash)
>     if [[ "$output" == *"readline"* ]]; then
>         echo "test_get_optional_deps passed"
>     else
>         echo "test_get_optional_deps failed"
>     fi
> }
> 
> # Test function for get_selections
> # Purpose: Tests the get_selections function.
> test_get_selections() {
>     optional_deps="readline: GNU readline library: 1"
>     output=$(echo "$optional_deps" | get_selections)
>     if [[ "$output" == *"Selected items: readline"* ]]; then
>         echo "test_get_selections passed"
>     else
>         echo "test_get_selections failed"
>     fi
> }
> 
> # Function: run_tests
> # Purpose: Runs all test functions.
> run_tests() {
>     test_is_installed
>     test_get_optional_deps
>     test_get_selections
> }
> 
> # Uncomment the following line to run tests
> # run_tests
> 
> # Uncomment the following line to run the main function
> # main "$@"
> 
> # Plan Outline
> # 1. Show welcome screen using dialog
> # 2. Check if yay is installed
> #    - Yes: Use dialog to ask user to select continue with yay or use pacman
> #    - No: Use pacman
> # 3. Use the selected pacman/yay to check if the $package is valid/installable. If not, show message and exit
> # 4. If found, run get_optional_deps. If none, continue
> # 5. If one or more, run get_selections
> # 6. Use dialog to inform the user that there are optional dependencies
> # 7. Use dialog to let the user choose all, none, or custom
> #    - If all, continue with a list of all optional dependencies to install
> #    - If none, continue and don't install or remove any optional dependencies
> #    - If custom, use selected items to create a list of packages to install (--needed)
> #      - Use not selected items to create a list of packages to remove (only if installed)
> # 8. Use dialog to show a summary of the packages to be installed and removed
> # 9. Ask user to confirm or cancel
> # 10. If confirm, perform remove then perform install
> # 11. Add tests
126,146d182
< # make sure there is an argument else show usage
< #
< # show welcome screen using dialog
< #
< # check if yay is installed
< #   yes: use dialog. ask user to select continue with yay or use pacman
< #   no: use pacman
< #
< # use the selected pacman/yay to check if the $package is valid/installable. if not show message and exit 
< #  if found run get_optional_deps if none continue
< #  if one or more run get_selections 
< #    use dialog. inform the user that there are optional dependencies
< #    use dialog. the user can choose all, none or custom
< #    if all contionue with a list of all optional dependencies to install
< #    if none continue and don't install or remove any optional dependencies
< #    if custom
< #       use selected items to create a list of packages to install (--needed)
< #       use not selected items to create a list of packages to remove (only if installed)
< # use dialog. show a summary of the packages to be installed and removed
< # ask user to confirm or cancel
< # if confirm perform remove then perform install
